{"ast":null,"code":"import React from 'react';\nimport { initializeStore } from '../store';\nvar isServer = false;\nvar __NEXT_REDUX_STORE__ = '__NEXT_REDUX_STORE__';\n\nfunction getOrCreateStore(initialState) {\n  // Always make a new store if server, otherwise state is shared between requests\n  if (isServer) {\n    return initializeStore(initialState);\n  } // Create store if unavailable on the client and set it on the window object\n\n\n  if (!window[__NEXT_REDUX_STORE__]) {\n    window[__NEXT_REDUX_STORE__] = initializeStore(initialState);\n  }\n\n  return window[__NEXT_REDUX_STORE__];\n}\n/* export default App => {\n  return class AppWithRedux extends React.Component {\n\n\n    static async getInitialProps(appContext) {\n      // Get or Create the store with `undefined` as initialState\n      // This allows you to set a custom default initialState\n      const reduxStore = getOrCreateStore()\n      // Provide the store to getInitialProps of pages\n      appContext.ctx.reduxStore = reduxStore\n      let appProps = {}\n      if (typeof App.getInitialProps === 'function') {\n        appProps = await App.getInitialProps(appContext)\n      }\n      return {\n        ...appProps,\n        initialReduxState: reduxStore.getState(),\n      }\n    }\n\n\n    constructor(props) {\n      super(props)\n      this.reduxStore = getOrCreateStore(props.initialReduxState)\n    }\n\n    render() {\n      return <App {...this.props} reduxStore={this.reduxStore} />\n    }\n  }\n} */\n\n/* export default App => {\n  class AppWithRedux extends React.Component {\n    constructor(props) {\n      console.log(props);\n      super(props)\n      this.reduxStore = getOrCreateStore(props.initialReduxState)\n    }\n\n    render() {\n      return <App {...this.props} reduxStore={this.reduxStore} />\n    }\n  }\n  AppWithRedux.getInitialProps = async appContext => {\n    const reduxStore = getOrCreateStore()\n    appContext.ctx.reduxStore = reduxStore\n\n    let appProps = {}\n    if (typeof App.getInitialProps === 'function') {\n      appProps = await App.getInitialProps(appContext)\n    }\n    return {\n      ...appProps,\n      initialReduxState: reduxStore.getState(),\n    }\n  }\n\n  return AppWithRedux\n} */","map":{"version":3,"sources":["D:/react/reactGit/jokcy/with-redux-thunk-app/lib/with-redux-store.js"],"names":["React","initializeStore","isServer","__NEXT_REDUX_STORE__","getOrCreateStore","initialState","window"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,eAAT,QAAgC,UAAhC;AAEA,IAAMC,QAAQ,QAAd;AACA,IAAMC,oBAAoB,GAAG,sBAA7B;;AAEA,SAASC,gBAAT,CAA0BC,YAA1B,EAAwC;AACtC;AACA,MAAIH,QAAJ,EAAc;AACZ,WAAOD,eAAe,CAACI,YAAD,CAAtB;AACD,GAJqC,CAMtC;;;AACA,MAAI,CAACC,MAAM,CAACH,oBAAD,CAAX,EAAmC;AACjCG,IAAAA,MAAM,CAACH,oBAAD,CAAN,GAA+BF,eAAe,CAACI,YAAD,CAA9C;AACD;;AACD,SAAOC,MAAM,CAACH,oBAAD,CAAb;AACD;AAED;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAgCA","sourcesContent":["import React from 'react'\nimport { initializeStore } from '../store'\n\nconst isServer = typeof window === 'undefined'\nconst __NEXT_REDUX_STORE__ = '__NEXT_REDUX_STORE__'\n\nfunction getOrCreateStore(initialState) {\n  // Always make a new store if server, otherwise state is shared between requests\n  if (isServer) {\n    return initializeStore(initialState)\n  }\n\n  // Create store if unavailable on the client and set it on the window object\n  if (!window[__NEXT_REDUX_STORE__]) {\n    window[__NEXT_REDUX_STORE__] = initializeStore(initialState)\n  }\n  return window[__NEXT_REDUX_STORE__]\n}\n\n/* export default App => {\n  return class AppWithRedux extends React.Component {\n\n\n    static async getInitialProps(appContext) {\n      // Get or Create the store with `undefined` as initialState\n      // This allows you to set a custom default initialState\n      const reduxStore = getOrCreateStore()\n      // Provide the store to getInitialProps of pages\n      appContext.ctx.reduxStore = reduxStore\n      let appProps = {}\n      if (typeof App.getInitialProps === 'function') {\n        appProps = await App.getInitialProps(appContext)\n      }\n      return {\n        ...appProps,\n        initialReduxState: reduxStore.getState(),\n      }\n    }\n\n\n    constructor(props) {\n      super(props)\n      this.reduxStore = getOrCreateStore(props.initialReduxState)\n    }\n\n    render() {\n      return <App {...this.props} reduxStore={this.reduxStore} />\n    }\n  }\n} */\n\n/* export default App => {\n  class AppWithRedux extends React.Component {\n    constructor(props) {\n      console.log(props);\n      super(props)\n      this.reduxStore = getOrCreateStore(props.initialReduxState)\n    }\n\n    render() {\n      return <App {...this.props} reduxStore={this.reduxStore} />\n    }\n  }\n  AppWithRedux.getInitialProps = async appContext => {\n    const reduxStore = getOrCreateStore()\n    appContext.ctx.reduxStore = reduxStore\n\n    let appProps = {}\n    if (typeof App.getInitialProps === 'function') {\n      appProps = await App.getInitialProps(appContext)\n    }\n    return {\n      ...appProps,\n      initialReduxState: reduxStore.getState(),\n    }\n  }\n\n  return AppWithRedux\n} */\n"]},"metadata":{},"sourceType":"module"}